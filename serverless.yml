service: k8cluster-maintain-tenant

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-1
  stage: ${opt:stage, 'local'}
  # iam:
  #   role: arn:aws:iam::000000000:role/lambda-ex
  iam:
    role: 
      name: lambda-sqs-access
      statements:
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            Fn::GetAtt: [ DueDateEventQueue, Arn ]
      tags:
        DEPARTMENT: k8cluster
        EMAIL: amit.kshirsagar.13@gmail.com

plugins:
  - serverless-plugin-typescript
  - serverless-localstack

functions:
  # Cron Event
  tenantCronEvent: ${file(./handlers/cron/tenantHandler.yml):cronHandler}
  # SQS Events
  dueDateTenantMessageReceiveEvent: ${file(./handlers/sqs/dueDateEventHandler.yml):eventHandler}
  # S3 Events
  # tenantS3FileCreatedEvent: ${file(./handlers/s3/tenantS3FileCreatedHandler.yml):tenantS3FileCreatedHandler}

resources:
  Resources:
    DueDateEventQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: due-date-${opt:stage, self:provider.stage}-q
        MessageRetentionPeriod: 86400
        VisibilityTimeout: 30
        RedrivePolicy: 
          deadLetterTargetArn: 
            "Fn::GetAtt":
              - DueDateEventQueueDeadLetter
              - Arn
          maxReceiveCount: 1
    DueDateEventQueueDeadLetter:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: due-date-${opt:stage, self:provider.stage}-dlq
        MessageRetentionPeriod: 1209600
    ImageStoreBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: image-store-${opt:stage, self:provider.stage}
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: fname
            AttributeType: S
          - AttributeName: lname
            AttributeType: S
          - AttributeName: age
            AttributeType: "N"
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: email
            KeyType: HASH
          - AttributeName: fname
            KeyType: HASH
          - AttributeName: lname
            KeyType: HASH
          - AttributeName: age
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
# resources:
#   Resources:
#     CronJobTrigger:
#       Type: AWS::Events::Rule
#       Properties:
#         Name: CronJobTrigger
#         Description: trigger every 5 min
#         ScheduleExpression: cron(*/2 * * * ? *)
#         State: ENABLED
#         Targets:
#         - Id: CronJobTrigger
#           Arn: arn:aws:lambda:eu-west-1:000000000000:function:tenantCronEvent
#     LambdaInvokePermission:
#       Type: AWS::Lambda::Permission
#       Properties:
#         FunctionName: tenantCronEvent
#         Action: lambda:InvokeFunction
#         Principal: events.amazonaws.com
#         SourceArn:
#           Fn::GetAtt: [CronJobTrigger, Arn]

custom:
  localstack:
    debug: false
    stages:
      # list of stages for which the plugin should be enabled
      - local
    endpointFile: localstack_endpoint.json

